import{AsyncLocalStorage as y}from"node:async_hooks";import{H3Event as h,getRequestWebStream as P,getRequestURL as b,eventHandler as R}from"h3";import{getContext as w}from"unctx";function x(t){let e;const n=g(t),o={duplex:"half",method:t.method,headers:t.headers};return t.node.req.body instanceof ArrayBuffer?new Request(n,{...o,body:t.node.req.body}):new Request(n,{...o,get body(){return e||(e=_(t),e)}})}function v(t){return t.web??(t.web={request:x(t),url:g(t)}),t.web.request}function T(){return A()}const d=Symbol("$HTTPEvent");function S(t){return typeof t=="object"&&(t instanceof h||t?.[d]instanceof h||t?.__is_event__===!0)}function m(t){return function(...e){var n;const o=e[0];if(S(o))e[0]=o instanceof h||o.__is_event__?o:o[d];else{if(!((n=globalThis.app.config.server.experimental)!=null&&n.asyncContext))throw new Error("AsyncLocalStorage was not enabled. Use the `server.experimental.asyncContext: true` option in your app configuration to enable it. Or, pass the instance of HTTPEvent that you have as the first argument to the function.");e.unshift(T())}return t(...e)}}const g=m(b),_=m(P);function E(){var t;return w("nitro-app",{asyncContext:!!((t=globalThis.app.config.server.experimental)!=null&&t.asyncContext),AsyncLocalStorage:y})}function A(){const t=E().use().event;if(!t)throw new Error("No HTTPEvent found in AsyncLocalStorage. Make sure you are using the function within the server runtime.");return t}const H=[{path:"/__root",filePath:"/home/ayuba/tealishgen/app/routes/__root.tsx"},{path:"/about",filePath:"/home/ayuba/tealishgen/app/routes/about.tsx"},{path:"/features",filePath:"/home/ayuba/tealishgen/app/routes/features.tsx"},{path:"/",filePath:"/home/ayuba/tealishgen/app/routes/index.tsx"},{path:"/roadmap",filePath:"/home/ayuba/tealishgen/app/routes/roadmap.tsx"},{path:"/marketplace/:$contractId?",filePath:"/home/ayuba/tealishgen/app/routes/marketplace/$contractId.tsx"},{path:"/marketplace",filePath:"/home/ayuba/tealishgen/app/routes/marketplace/index.tsx"}],q=["GET","POST","PUT","PATCH","DELETE","OPTIONS","HEAD"];function $(t){return R(async e=>{const n=v(e);return await t({request:n})})}function I(t,e){const n=t.pathname.split("/").filter(Boolean),o=e.sort((a,r)=>{const s=a.routePath.split("/").filter(Boolean);return r.routePath.split("/").filter(Boolean).length-s.length}).filter(a=>{const r=a.routePath.split("/").filter(Boolean);return n.length>=r.length});for(const a of o){const r=a.routePath.split("/").filter(Boolean),s={};let u=!0;for(let i=0;i<r.length;i++){const c=r[i],f=n[i];if(c.startsWith("$"))if(c==="$"){const l=n.slice(i).join("/");if(l!=="")s["*"]=l,s._splat=l;else{u=!1;break}}else{const l=c.slice(1);s[l]=f}else if(c!==f){u=!1;break}}if(u)return{routePath:a.routePath,params:s,payload:a.payload}}}const p=H.filter(t=>t.$APIRoute);function C(t){const e=[];return t.forEach(n=>{const a=n.path.split("/").filter(Boolean).map(r=>r==="*splat"?"$":r.startsWith(":$")&&r.endsWith("?")?r.slice(1,-1):r).join("/");e.push({routePath:`/${a}`,payload:n})}),e}const W=async({request:t})=>{if(!p.length)return new Response("No routes found",{status:404});if(!q.includes(t.method))return new Response("Method not allowed",{status:405});const e=C(p),n=new URL(t.url,"http://localhost:3000"),o=I(n,e);if(!o)return new Response("Not found",{status:404});let a;try{a=await o.payload.$APIRoute.import().then(u=>u.APIRoute)}catch(u){return console.error("Error importing route file:",u),new Response("Internal server error",{status:500})}if(!a)return new Response("Internal server error",{status:500});const r=t.method,s=a.methods[r];return s?await s({request:t,params:o.params}):new Response("Method not allowed",{status:405})},N=$(W);export{N as default};
